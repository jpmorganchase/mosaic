import { z } from 'zod';
import { fileExtensionSchema } from './fileExtensionSchema.js';
import { modeSchema } from './modeSchema.js';
import { pluginModuleSchema } from './PluginModuleSchema.js';
import { serialiserModuleSchema } from './SerialiserModuleSchema.js';
import { sourceModuleSchema } from './SourceModuleSchema.js';
import { sourceScheduleSchema } from './SourceScheduleSchema.js';

export const mosaicConfigSchema = z.object({
  deployment: z.object({ mode: modeSchema, platform: z.string() }).optional(),
  /**
   * A collection of file extensions that can be served
   * e.g. [".mdx", ".json"]
   */
  pageExtensions: fileExtensionSchema.array().nonempty(),
  /**
   * A collection of filenames to ignore
   * These are typically generated by plugins.
   */
  ignorePages: z.string().array().optional().default([]),
  serialisers: z.array(serialiserModuleSchema),
  plugins: z.array(pluginModuleSchema),
  sources: z.array(sourceModuleSchema).nonempty(),
  schedule: sourceScheduleSchema.optional().default({
    checkIntervalMins: 30,
    initialDelayMs: 1000
  }),
  /**
   * If true, allows source definitions to be pushed to Mosaic on demand.
   * Only 'remote' source definitions will work as these will pull in the content from a remote source
   */
  enableSourcePush: z.boolean().optional().default(false)
});

export type MosaicConfig = z.infer<typeof mosaicConfigSchema>;
